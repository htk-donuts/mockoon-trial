openapi: 3.0.0
info:
  title: User API
  version: '1.0.0'
  description: Simple API to retrieve user information

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getUsers
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Maximum number of users to return
      responses:
        '200':
          description: Successful response with list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                multipleUsers:
                  summary: Example with multiple users
                  value:
                    - id: 1
                      name: "John Doe"
                      email: "john.doe@example.com"
                      age: 30
                    - id: 2
                      name: "Jane Smith"
                      email: "jane.smith@example.com"
                      age: 28
                emptyList:
                  summary: Example with empty list
                  value: []

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
          description: ID of the user to retrieve
      responses:
        '200':
          description: Successful response with user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                validUser:
                  summary: Example of a valid user
                  value:
                    id: 1
                    name: "John Doe"
                    email: "john.doe@example.com"
                    age: 30
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                userNotFound:
                  summary: Example of user not found error
                  value:
                    code: "USER_NOT_FOUND"
                    message: "User with ID 999 not found"

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
        name:
          type: string
          description: Full name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        age:
          type: integer
          minimum: 0
          description: Age of the user
      example:
        id: 1
        name: "John Doe"
        email: "john.doe@example.com"
        age: 30

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message